<!DOCTYPE qhelp PUBLIC "-//Semmle//qhelp//EN" "qhelp.dtd">
<qhelp>

<overview>
<p>
When comparing results of cryptographic operations, such as MAC or digital signature,
a constant-time algorithm should be used. In other words, the comparison time should not depend on
the content of the input. Otherwise, attackers may be able to implement a timing attack
if they can control input. A successful timing attack may result in leaking secrets or authentication bypass.
</p>
</overview>

<recommendation>
<p>
Use <code>MessageDigest.isEqual()</code> method to compare results of cryptographic operations.
If this method is used, then the calculation time depends only on the length of input byte arrays,
and does not depend on the contents of the arrays.
</p>
</recommendation>

<example>
<p>
The following example uses <code>Arrays.equals()</code> method for comparing MAC.
This method implements a non-constant-time algorithm:
</p>
<sample src="UnsafeMacComparison.java" />

<p>
The next example uses a safe constant-time algorithm for comparing MAC:
</p>
<sample src="SafeMacComparison.java" />

</example>

<references>
<li>
  Wikipedia:
  <a href="https://en.wikipedia.org/wiki/Timing_attack">Timing attack</a>.
</li>
<li>
  Coursera:
  <a href="https://www.coursera.org/lecture/crypto/timing-attacks-on-mac-verification-FHGW1">Timing attacks on MAC verification</a>
</li>
<li>
  NCC Group:
  <a href="https://www.nccgroup.trust/globalassets/our-research/us/whitepapers/TimeTrial.pdf">Time Trial: Racing Towards Practical Remote Timing Attacks</a>
</li>
<li>
  Java API Specification:
  <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/security/MessageDigest.html#isEqual(byte[],byte[])">MessageDigest.isEqual() method</a>
</li>
</references>
</qhelp>
